/**
 * TCP WebSocket Service
 * B·ªï sung h√†m onConnectionChange ƒë·ªÉ theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
 */

type MessageHandler = (message: any) => void;
type ConnectionChangeCallback = (isConnected: boolean) => void;

export interface PIDValues {
  kp: number;
  ki: number;
  kd: number;
}

class TcpWebSocketService {
  private socket: WebSocket | null = null;
  private url: string;
  private _isConnected: boolean = false;
  private reconnectInterval: number = 5000;
  private reconnectTimer: NodeJS.Timeout | null = null;
  private reconnectAttempts: number = 0;
  private maxReconnectAttempts: number = 5;
  private messageHandlers: Map<string, Set<MessageHandler>> = new Map();
  private connectionListeners: Array<ConnectionChangeCallback> = [];

  constructor(url: string) {
    this.url = url;
    this.connect();
  }

  /**
   * ƒêƒÉng k√Ω l·∫Øng nghe s·ª± thay ƒë·ªïi tr·∫°ng th√°i k·∫øt n·ªëi
   */
  public onConnectionChange(callback: ConnectionChangeCallback): void {
    this.connectionListeners.push(callback);
    // G·ªçi callback ngay l·∫≠p t·ª©c v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i
    if (callback && typeof callback === 'function') {
      callback(this._isConnected);
    }
  }

  /**
   * H·ªßy ƒëƒÉng k√Ω l·∫Øng nghe s·ª± thay ƒë·ªïi tr·∫°ng th√°i k·∫øt n·ªëi
   */
  public offConnectionChange(callback: ConnectionChangeCallback): void {
    this.connectionListeners = this.connectionListeners.filter(
      (listener) => listener !== callback
    );
  }

  /**
   * Thi·∫øt l·∫≠p k·∫øt n·ªëi WebSocket
   */
  public connect(): void {
    if (this.socket && (this.socket.readyState === WebSocket.CONNECTING || this.socket.readyState === WebSocket.OPEN)) {
      return;
    }

    try {
      this.socket = new WebSocket(this.url);

      this.socket.onopen = () => {
        console.log('K·∫øt n·ªëi WebSocket ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p');
        this._isConnected = true;
        
        // Th√¥ng b√°o k·∫øt n·ªëi th√†nh c√¥ng
        this.notifyConnectionChange(true);
        
        if (this.reconnectTimer) {
          clearTimeout(this.reconnectTimer);
          this.reconnectTimer = null;
        }
      };

      this.socket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          this.handleMessage(data);
        } catch (error) {
          console.error('L·ªói x·ª≠ l√Ω tin nh·∫Øn:', error);
        }
      };

      this.socket.onclose = () => {
        console.log('K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng');
        this._isConnected = false;
        
        // Th√¥ng b√°o ng·∫Øt k·∫øt n·ªëi
        this.notifyConnectionChange(false);
        
        // Thi·∫øt l·∫≠p l·∫°i k·∫øt n·ªëi sau m·ªôt kho·∫£ng th·ªùi gian
        this.attemptReconnect();
      };

      this.socket.onerror = (error) => {
        console.error('L·ªói WebSocket:', error);
        this._isConnected = false;
        
        // Th√¥ng b√°o l·ªói k·∫øt n·ªëi
        this.notifyConnectionChange(false);
      };
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi WebSocket:', error);
      this._isConnected = false;
      
      // Th√¥ng b√°o l·ªói k·∫øt n·ªëi
      this.notifyConnectionChange(false);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o khi tr·∫°ng th√°i k·∫øt n·ªëi thay ƒë·ªïi
   */
  private notifyConnectionChange(isConnected: boolean): void {
    this.connectionListeners.forEach((listener) => {
      try {
        listener(isConnected);
      } catch (error) {
        console.error('L·ªói trong listener k·∫øt n·ªëi:', error);
      }
    });
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c t·ª´ WebSocket
   */
  private handleMessage(data: any): void {
    // X·ª≠ l√Ω tin nh·∫Øn chung
    console.log('üì• Nh·∫≠n t·ª´ TCP server:', data);
    
    // G·ªçi c√°c handlers cho c√°c lo·∫°i tin nh·∫Øn c·ª• th·ªÉ
    if (data.type && this.messageHandlers.has(data.type)) {
      const handlers = this.messageHandlers.get(data.type);
      if (handlers) {
        handlers.forEach(handler => {
          try {
            handler(data);
          } catch (error) {
            console.error(`L·ªói trong handler cho tin nh·∫Øn lo·∫°i ${data.type}:`, error);
          }
        });
      }
    }
    
    // G·ªçi c√°c handlers cho t·∫•t c·∫£ c√°c tin nh·∫Øn
    if (this.messageHandlers.has('*')) {
      const handlers = this.messageHandlers.get('*');
      if (handlers) {
        handlers.forEach(handler => {
          try {
            handler(data);
          } catch (error) {
            console.error('L·ªói trong handler cho t·∫•t c·∫£ tin nh·∫Øn:', error);
          }
        });
      }
    }
  }

  /**
   * G·ª≠i th√¥ng ƒëi·ªáp ƒë·∫øn TCP server
   */
  sendMessage(message: any): boolean {
    if (!this._isConnected || !this.socket) {
      console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng ƒëi·ªáp: Ch∆∞a k·∫øt n·ªëi ƒë·∫øn TCP server');
      return false;
    }
    
    try {
      // ƒê·∫£m b·∫£o c√≥ tr∆∞·ªùng timestamp
      if (!message.timestamp) {
        message.timestamp = Date.now() / 1000;
      }
      
      // Log th√¥ng ƒëi·ªáp ƒëang g·ª≠i
      console.log('üì§ G·ª≠i ƒë·∫øn TCP server:', message);
      
      // G·ª≠i d∆∞·ªõi d·∫°ng JSON string
      this.socket.send(JSON.stringify(message));
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i th√¥ng ƒëi·ªáp ƒë·∫øn TCP server:', error);
      return false;
    }
  }
  
  /**
   * G·ª≠i c·∫•u h√¨nh PID
   */
  sendPidConfig(robotId: string, motorId: number, parameters: PIDValues): boolean {
    return this.sendMessage({
      type: "pid_config",
      robot_id: robotId,
      motor_id: motorId,
      parameters: parameters,
      timestamp: Date.now() / 1000
    });
  }
  
  /**
   * L·∫•y danh s√°ch k·∫øt n·ªëi robot
   */
  getRobotConnections(): boolean {
    return this.sendMessage({
      type: "get_robot_connections",
      robot_id: "robot1", // Th√™m robot_id m·∫∑c ƒë·ªãnh
      timestamp: Date.now() / 1000
    });
  }
  
  /**
   * Gi·∫£ l·∫≠p k·∫øt n·ªëi robot ƒë·∫øn TCP
   */
  simulateRobotConnection(robotId: string): boolean {
    return this.sendMessage({
      type: "connect_robot_simulator",
      robot_id: robotId,
      timestamp: Date.now() / 1000
    });
  }
  
  /**
   * ƒêƒÉng k√Ω handler cho lo·∫°i th√¥ng ƒëi·ªáp c·ª• th·ªÉ
   */
  onMessage(type: string, handler: MessageHandler): void {
    if (!this.messageHandlers.has(type)) {
      this.messageHandlers.set(type, new Set());
    }
    this.messageHandlers.get(type)!.add(handler);
  }
  
  /**
   * H·ªßy ƒëƒÉng k√Ω handler
   */
  offMessage(type: string, handler: MessageHandler): void {
    const handlers = this.messageHandlers.get(type);
    if (handlers) {
      handlers.delete(handler);
    }
  }
  
  /**
   * Ng·∫Øt k·∫øt n·ªëi
   */
  disconnect(): void {
    if (this.socket) {
      this.socket.close();
      this.socket = null;
      this._isConnected = false;
      this.notifyConnectionChange(false);
    }
    
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }
  }
  
  /**
   * Th·ª≠ k·∫øt n·ªëi l·∫°i
   */
  private attemptReconnect(): void {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
    }
    
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.log('ƒê√£ ƒë·∫°t s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i t·ªëi ƒëa');
      return;
    }
    
    this.reconnectAttempts++;
    
    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
    console.log(`Th·ª≠ k·∫øt n·ªëi l·∫°i sau ${delay}ms (l·∫ßn th·ª≠ ${this.reconnectAttempts})`);
    
    this.reconnectTimer = setTimeout(() => {
      console.log('ƒêang k·∫øt n·ªëi l·∫°i...');
      this.connect();
    }, delay);
  }
  
  /**
   * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
   */
  isConnected(): boolean {
    return this._isConnected;
  }

  /**
   * Getter cho tr·∫°ng th√°i k·∫øt n·ªëi WebSocket
   */
  public isWebSocketConnected(): boolean {
    return this._isConnected;
  }
}

// T·∫°o instance singleton
const tcpWebSocketService = new TcpWebSocketService(process.env.REACT_APP_TCP_WS_URL || 'ws://localhost:9002');

export default tcpWebSocketService;