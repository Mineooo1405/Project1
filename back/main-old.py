import socket
import threading
import numpy as np
import datetime
from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel
from sqlalchemy.orm import Session
from database import SessionLocal, FirmwareFile, RobotControl, PIDConfig, RPMLLog, TrajectoryLog, CommandLog, IMULog
import matplotlib.pyplot as plt
import io
import json
import base64
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import asyncio

# Th√¥ng s·ªë robot
robot_radius = 0.1  # B√°n k√≠nh robot (m)
wheel_radius = 0.05  # B√°n k√≠nh b√°nh xe (m)
x, y, theta = 0, 0, 0  # V·ªã tr√≠ v√† g√≥c quay ban ƒë·∫ßu
dt = 0.1  # Kho·∫£ng th·ªùi gian c·∫≠p nh·∫≠t (s)

def compute_velocity(yaw, omega):
    """T√≠nh v·∫≠n t·ªëc v_x, v_y d·ª±a tr√™n v·∫≠n t·ªëc g√≥c c·ªßa 3 b√°nh xe."""
    H = np.array([
        [-np.sin(yaw), np.cos(yaw), robot_radius],
        [-np.sin(np.pi / 3 - yaw), -np.cos(np.pi / 3 - yaw), robot_radius],
        [np.sin(np.pi / 3 + yaw), -np.cos(np.pi / 3 + yaw), robot_radius]
    ])
    omega_scaled = np.array(omega) * wheel_radius
    velocities = np.linalg.solve(H, omega_scaled)
    return velocities[0], velocities[1], velocities[2]

app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class TCPConnectionManager:
    def __init__(self, host="0.0.0.0", port=5005):
        self.server_host = host
        self.server_port = port
        self.robot_connections = {}  # L∆∞u k·∫øt n·ªëi robot {robot_id: socket}
        self.lock = threading.Lock()  # ƒê·ªÉ x·ª≠ l√Ω ƒëa lu·ªìng an to√†n

    def start_tcp_server(self):
        """Kh·ªüi ƒë·ªông TCP server"""
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((self.server_host, self.server_port))
        server.listen(10)
        print(f"TCP Server ƒëang ch·∫°y tr√™n {self.server_host}:{self.server_port}...")

        while True:
            client_socket, addr = server.accept()
            print(f"üîå K·∫øt n·ªëi m·ªõi t·ª´ {addr}")

            # Kh·ªüi ƒë·ªông lu·ªìng ƒë·ªÉ x·ª≠ l√Ω client
            client_handler = threading.Thread(target=self.handle_client, args=(client_socket,))
            client_handler.start()

    def handle_client(self, client_socket):
        """X·ª≠ l√Ω t·ª´ng robot"""
        try:
            client_socket.send("ID?".encode("utf-8"))  # Y√™u c·∫ßu robot g·ª≠i ID
            robot_id = client_socket.recv(1024).decode("utf-8").strip()

            with self.lock:
                self.robot_connections[robot_id] = client_socket
            print(f"Robot {robot_id} ƒë√£ k·∫øt n·ªëi.")

            while True:
                data = client_socket.recv(1024).decode("utf-8")
                if not data:
                    break
                print(f"Nh·∫≠n t·ª´ {robot_id}: {data}")

                # L∆∞u v√†o database
                try:
                    self.save_to_database(robot_id, data)
                except Exception as e:
                    print(f"L·ªói l∆∞u database: {e}")

        except ConnectionError:
            print(f"Robot {robot_id} m·∫•t k·∫øt n·ªëi.")
        finally:
            with self.lock:
                if robot_id in self.robot_connections:
                    del self.robot_connections[robot_id]
            client_socket.close()
            
tcp_manager = TCPConnectionManager()
threading.Thread(target=tcp_manager.start_tcp_server, daemon=True).start()

# ==============================
# üìå WebSocket Setup
# ==============================
frontend_ws: WebSocket = None  # Ch·ªâ duy nh·∫•t 1 frontend

@app.websocket("/ws/trajectory")
async def websocket_endpoint(websocket: WebSocket):
    """ WebSocket k·∫øt n·ªëi v·ªõi Frontend """
    global frontend_ws
    await websocket.accept()
    frontend_ws = websocket
    print("‚úÖ WebSocket Frontend ƒë√£ k·∫øt n·ªëi.")

    try:
        while True:
            data = await websocket.receive_text()
            print(f"üì° Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend: {data}")
    except WebSocketDisconnect:
        frontend_ws = None
        print("‚ùå WebSocket Frontend ng·∫Øt k·∫øt n·ªëi. Ch·ªù k·∫øt n·ªëi l·∫°i...")

async def send_data_to_frontend():
    """ G·ª≠i d·ªØ li·ªáu real-time t·ª´ Database l√™n Frontend """
    global frontend_ws
    if frontend_ws:
        try:
            db = next(get_db())
            logs = db.query(TrajectoryLog).all()
            trajectory_data = {
                "x": [log.x_position for log in logs], 
                "y": [log.y_position for log in logs]
            }
            print("üì° G·ª≠i d·ªØ li·ªáu qu·ªπ ƒë·∫°o ƒë·∫øn Frontend:", trajectory_data)  # üü¢ Debug log
            await frontend_ws.send_text(json.dumps(trajectory_data))
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói g·ª≠i d·ªØ li·ªáu WebSocket: {e}")
@app.get("/")
def read_root():
    return {"message": "Robot Control API is running"}

# ==============================
# üìå ƒêI·ªÄU KHI·ªÇN ROBOT
# ==============================

@app.get("/send/{robot_id}/{command}")
async def send_command(robot_id: str, command: str, db: Session = Depends(get_db)):
    response = server.send_command(robot_id, command)

    # L∆∞u l·ªánh v√†o database
    db_command = CommandLog(command=command)
    db.add(db_command)
    db.commit()

    return {"status": response}


# ==============================
# üìå X·ª¨ L√ù D·ªÆ LI·ªÜU C·∫¢M BI·∫æN IMU
# ==============================

class IMUData(BaseModel):
    theta: float
    omega_wheel: list[float]
    dt: float

robot_radius = 0.1
wheel_radius = 0.05
x, y, theta = 0, 0, 0

def compute_velocity(theta, omega):
    H = np.array([
        [-np.sin(theta), np.cos(theta), robot_radius],
        [-np.sin(np.pi / 3 - theta), -np.cos(np.pi / 3 - theta), robot_radius],
        [np.sin(np.pi / 3 + theta), -np.cos(np.pi / 3 + theta), robot_radius]
    ])
    omega_scaled = np.array(omega) * wheel_radius
    velocities = np.linalg.solve(H, omega_scaled)
    return velocities[0], velocities[1]

@app.post("/imu_data")
def receive_imu_data(imu: IMUData, db: Session = Depends(get_db)):
    global x, y, theta
    theta = imu.theta

    v_x, v_y = compute_velocity(theta, imu.omega_wheel)

    x += v_x * imu.dt
    y += v_y * imu.dt

    imu_entry = IMULog(
        theta=theta, omega=np.mean(imu.omega_wheel),
        v_x=v_x, v_y=v_y, x_position=x, y_position=y
    )
    db.add(imu_entry)
    db.commit()

    return {"x": x, "y": y, "theta": theta}

@app.get("/imu_data/latest")
def get_latest_imu_data(db: Session = Depends(get_db)):
    latest_imu = db.query(IMULog).order_by(IMULog.timestamp.desc()).first()
    if latest_imu:
        return {
            "x": latest_imu.x_position, "y": latest_imu.y_position, "theta": latest_imu.theta,
            "timestamp": latest_imu.timestamp
        }
    return {"message": "No IMU data available"}

# ==============================
# üìå QU·∫¢N L√ù PID
# ==============================

class PIDConfigData(BaseModel):
    motor_id: int
    Kp: float
    Ki: float
    Kd: float

@app.post("/set_pid")
def set_pid(pid: PIDConfigData, db: Session = Depends(get_db)):
    pid_entry = PIDConfig(motor_id=pid.motor_id, Kp=pid.Kp, Ki=pid.Ki, Kd=pid.Kd)
    db.add(pid_entry)
    db.commit()
    return {"message": f"PID updated for motor {pid.motor_id}"}

@app.get("/get_pid/{motor_id}")
def get_pid(motor_id: int, db: Session = Depends(get_db)):
    pid_data = db.query(PIDConfig).filter(PIDConfig.motor_id == motor_id).order_by(PIDConfig.last_updated.desc()).first()
    if pid_data:
        return {"motor_id": motor_id, "Kp": pid_data.Kp, "Ki": pid_data.Ki, "Kd": pid_data.Kd}
    return {"message": "No PID data available"}

# ==============================
# üìå GHI D·ªÆ LI·ªÜU RPM
# ==============================

@app.get("/rpm_logs/latest")
def get_latest_rpm(db: Session = Depends(get_db)):
    latest_rpm = db.query(RPMLLog).order_by(RPMLLog.timestamp.desc()).first()
    if latest_rpm:
        return {"motor_id": latest_rpm.motor_id, "rpm_value": latest_rpm.rpm_value, "timestamp": latest_rpm.timestamp}
    return {"message": "No RPM data available"}

@app.post("/rpm_logs")
def add_rpm_log(motor_id: int, rpm_value: float, db: Session = Depends(get_db)):
    rpm_entry = RPMLLog(motor_id=motor_id, rpm_value=rpm_value)
    db.add(rpm_entry)
    db.commit()
    return {"message": "RPM data stored"}

# ==============================
# üìå API `POST` ƒê·ªÉ G·ª≠i D·ªØ Li·ªáu Qu·ªπ ƒê·∫°o Robot
# ==============================
class TrajectoryData(BaseModel):
    x_position: float
    y_position: float
    angel: float

@app.post("/trajectory/")
def add_trajectory_data(trajectory: TrajectoryData, db: Session = Depends(get_db)):
    new_entry = TrajectoryLog(
        x_position=trajectory.x_position,
        y_position=trajectory.y_position,
        angel=trajectory.angel,
        timestamp=datetime.datetime.utcnow()
    )
    db.add(new_entry)
    db.commit()
    return {"message": "Trajectory data added successfully"}

# ==============================
# üìå API `GET` ƒê·ªÉ L·∫•y D·ªØ Li·ªáu Qu·ªπ ƒê·∫°o
# ==============================
@app.get("/trajectory/")
def get_trajectory(db: Session = Depends(get_db)):
    logs = db.query(TrajectoryLog).all()
    x_data = [log.x_position for log in logs]
    y_data = [log.y_position for log in logs]
    angles = [log.angel for log in logs]
    timestamps = [log.timestamp for log in logs]
    return {"x": x_data, "y": y_data, "theta": angles, "timestamps": timestamps}
# ==============================
# üìå KH·ªûI CH·∫†Y API
# ==============================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)

